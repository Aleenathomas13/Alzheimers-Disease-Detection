# -*- coding: utf-8 -*-
"""Dense121.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HL1xsIDe_0kGAvM--CqARGJxy4HE405Y
"""

#image preprocessing code


import os
from PIL import Image
import numpy as np

def load_image(file_path):
    # Load the image from the specified file path
    image = Image.open(file_path)
    return image

def resize_image(image, target_size):
    # Resize the image to the target size
    resized_image = image.resize(target_size)
    return resized_image


def normalize_image(image):
    # Convert the image to a numpy array
    image_array = np.array(image)

    # Normalize the pixel values to the range [0, 1]
    normalized_image = image_array / 255.0
    return normalized_image


def preprocess_image_file(file_path, target_size=(224, 224)):
    # Load the image
    image = load_image(file_path)

    # Resize the image
    resized_image = resize_image(image, target_size)

    # Normalize the image
    normalized_image = normalize_image(resized_image)
    return normalized_image

def preprocess_image_directory(directory_path, target_size=(224, 224)):
    preprocessed_images = []

    # Get a list of all files in the directory
    file_list = os.listdir(directory_path)

    for file_name in file_list:
        if file_name.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):

            file_path = os.path.join(directory_path, file_name)

            # Preprocess the image
            preprocessed_image = preprocess_image_file(file_path, target_size)
            preprocessed_images.append(preprocessed_image)

    return preprocessed_images

directory_path = "/content/drive/MyDrive/rgbsplit"
preprocessed_images = preprocess_image_directory(directory_path)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.applications import DenseNet121
from tensorflow.keras.layers import Dense, GlobalAveragePooling2D
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import SparseCategoricalCrossentropy
import matplotlib.pyplot as plt

train_data_dir = '/content/drive/MyDrive/rgbsplit/rgbtrain'
test_data_dir = '/content/drive/MyDrive/rgbsplit/rgbtest'

# Set up parameters
img_width, img_height = 224, 224
batch_size = 32
epochs = 15
num_classes = 3

from IPython.testing import test
train_datagen = ImageDataGenerator(rescale=1.0/255)
train_generator = train_datagen.flow_from_directory(
    train_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')

test_datagen = ImageDataGenerator(rescale=1.0/255)
test_generator = test_datagen.flow_from_directory(
    test_data_dir,
    target_size=(img_width, img_height),
    batch_size=batch_size,
    class_mode='categorical')
base_model = DenseNet121(weights='imagenet', include_top=False)

x = base_model.output
x = GlobalAveragePooling2D()(x)
x = Dense(256, activation='relu')(x)
predictions = Dense(num_classes, activation='softmax')(x)

# Create the model
model = tf.keras.models.Model(inputs=base_model.input, outputs=predictions)

optimizer = Adam(learning_rate=0.001)
loss = 'categorical_crossentropy'
model.compile(optimizer=optimizer, loss=loss, metrics=['accuracy'])

history = model.fit(
    train_generator,
    steps_per_epoch=train_generator.samples // batch_size,
    epochs=epochs,
    validation_data=test_generator,
    validation_steps=test_generator.samples // batch_size)

# Plot the training/validation accuracy
plt.figure(figsize=(12, 4))
plt.subplot(1, 2, 1)
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Val'], loc='upper left')

import numpy as np
from sklearn.metrics import precision_score, f1_score

y_pred = model.predict(test_generator, steps=test_generator.n // batch_size + 1)
y_true = test_generator.classes
y_pred_classes = np.argmax(y_pred, axis=1)

precision = precision_score(y_true, y_pred_classes, average='weighted')
f1 = f1_score(y_true, y_pred_classes, average='weighted')

# Print the results
print("Weighted Precision:", precision)
print("Weighted F1-score:", f1)

model.save("/content/drive/MyDrive/densenet121.h5")